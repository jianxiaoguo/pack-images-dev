#!/usr/bin/env bash
set -eo pipefail

echo "---> Ruby Buildpack"

# 1. GET ARGS
layers_dir=$1
plan_path=$3

# 2. DOWNLOAD RUBY
ruby_layer_dir="${layers_dir}/ruby"
mkdir -p "${ruby_layer_dir}"

# determine ruby version provided during detection
ruby_version=$(< "${plan_path}" yj -t | jq -r '.entries[] | select(.name == "ruby") | .version')
remote_ruby_version=$(< "${ruby_layer_dir}.toml" yj -t | jq -r .metadata 2>/dev/null || echo 'not found')
if [[ "${ruby_version}" == "${remote_ruby_version}" ]] ; then
  echo "---> Reusing ruby"
else
  echo "---> Downloading and extracting Ruby ${ruby_version}"
  ruby_url=https://buildpacks.drycc.cc/ruby/${CNB_STACK_ID}/ruby-${ruby_version}.tgz
  wget -q -O - "${ruby_url}" | tar -xzf - -C "${ruby_layer_dir}"
  cat > "${ruby_layer_dir}.toml" <<EOL
cache = true
launch = true
metadata = "${ruby_version}"
EOL
fi


# 3. MAKE RUBY AVAILABLE TO THIS SCRIPT
export PATH="${ruby_layer_dir}/bin:${PATH}"
export C_INCLUDE_PATH="${C_INCLUDE_PATH}:${ruby_layer_dir}/include"
export CPLUS_INCLUDE_PATH="${C_INCLUDE_PATH}:${ruby_layer_dir}/include"
export LIBRARY_PATH="${LD_LIBRARY_PATH}:${ruby_layer_dir}/lib"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${ruby_layer_dir}/lib"

# Compares previous Gemfile.lock checksum to the current Gemfile.lock
bundler_layer_dir="${layers_dir}/bundler"
local_bundler_checksum=$(sha256sum Gemfile.lock | cut -d ' ' -f 1 || echo 'not found') 
remote_bundler_checksum=$(< "${bundler_layer_dir}.toml" yj -t | jq -r .metadata 2>/dev/null || echo 'not found')

mkdir -p "${bundler_layer_dir}/bin"
bundle config --local path "${bundler_layer_dir}" >/dev/null
bundle config --local bin "${bundler_layer_dir}/bin" >/dev/null
if [[ -f Gemfile.lock && "${local_bundler_checksum}" == "${remote_bundler_checksum}" ]] ; then
  echo "---> Reusing gems"
else
  echo "---> Installing gems"
  cat > "${bundler_layer_dir}.toml" <<EOL
cache = true
launch = true
metadata = "${local_bundler_checksum}"
EOL
  bundle install
fi

generate-launch.sh "${layers_dir}"
