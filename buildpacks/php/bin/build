#!/usr/bin/env bash

# heroku
## fail hard
#set -o pipefail
## fail harder
#set -eu
#
#bp_dir=$(
#	cd "$(dirname "$0")/.."
#	pwd
#) # absolute path
#source_dir="${bp_dir}/target"
#
#layers_dir="${1:?}"
#platform_dir="${2:?}"
#
## translate new stack ID to old stack ID
#export STACK="$CNB_STACK_ID"
#
## copy the buildpack source into the target dir
#target_dir="$(mktemp -d)/target"
#cp -R "$source_dir" "$target_dir"
#chmod -R +w "$target_dir"
#
## create a shim cache layer
#cache_dir="${layers_dir}/shim"
#mkdir -p "${cache_dir}"
#echo "cache = true" >"${layers_dir}/shim.toml"
#
#"${target_dir}/bin/compile" "$(pwd)" "${cache_dir}" "${platform_dir}/env"
#
## copy profile.d scripts into a layer so they will be sourced
#if [[ -d .profile.d ]]; then
#	profile_dir="${layers_dir}/profile"
#	mkdir -p "${profile_dir}/profile.d"
#	cp .profile.d/* "${profile_dir}/profile.d/"
#	echo "launch = true" >"${profile_dir}.toml"
#fi
#
#if [[ -f "${target_dir}/export" ]]; then
#	echo "build = true" >>"${profile_dir}.toml"
#	mkdir -p "${profile_dir}/env.build/"
#	"${bp_dir}/bin/exports" "${target_dir}/export" "${platform_dir}" "${profile_dir}/env.build/"
#fi
#
## run bin/release, read Procfile, and generate launch.toml
#"${bp_dir}/bin/release" "${target_dir}" "${layers_dir}" "${platform_dir}" "$(pwd)"
#

set -eo pipefail

echo "---> PHP Buildpack"

# 1. GET ARGS
layers_dir=$1
plan_path=$3

bp_dir=$(
	cd "$(dirname "$0")"/..
	pwd
)

# 2. DOWNLOAD PHP
php_layer_dir="${layers_dir}/php"
mkdir -p "${php_layer_dir}"
s3_url="https://lang-php.s3.amazonaws.com/dist-heroku-20-stable/"
# determine php version provided during detection
php_version=$(< "${plan_path}" yj -t | jq -r '.entries[] | select(.name == "php") | .version')
remote_php_version="not found"
if [[ -f "${php_layer_dir}.toml" ]]; then
    remote_php_version=$(< "${php_layer_dir}.toml" yj -t | jq -r .metadata 2>/dev/null || echo 'not found')
fi
if [[ "${php_version}" == "${remote_php_version}" ]] ; then
  echo "---> Reusing php"
else
#  echo "---> Downloading and extracting php ${php_version}"
  echo "---> Downloading and extracting php 7.4.20"
  php_url="${s3_url}php-7.4.20.tar.gz"
  composer_url="${s3_url}composer-1.10.22.tar.gz"
  wget -q -O - "${php_url}" | tar -xzf - -C "${php_layer_dir}"
  wget -q -O - "${composer_url}" | tar -xzf - -C "${php_layer_dir}"
#  php_url="https://www.php.net/distributions/php-${php_version}.tar.gz"
#  wget -q -O - "${php_url}" | tar -xzf - --strip-components=1 -C "${php_layer_dir}"
  cat > "${php_layer_dir}.toml" <<EOL
cache = true
launch = true
metadata = "${php_version}"
EOL
fi

# 3. MAKE PHP AVAILABLE TO THIS SCRIPT
cp "${php_layer_dir}/sbin/php-fpm" "${php_layer_dir}/bin"
export PATH="${php_layer_dir}/bin:${php_layer_dir}/sbin:${PATH}"

# Compares previous composer.json checksum to the current composer.json
vendor_layer_dir="${layers_dir}/vendor"
mkdir -p "${vendor_layer_dir}"
#vendor_layer_dir="${layers_dir}/composer"
local_composer_checksum=$(sha256sum composer.json | cut -d ' ' -f 1 || echo 'not found')
remote_composer_checksum="not found"
if [[ -f "${vendor_layer_dir}.toml" ]]; then
    remote_composer_checksum=$(< "${vendor_layer_dir}.toml" yj -t | jq -r .metadata 2>/dev/null || echo 'not found')
fi

composer config --no-plugins vendor-dir
composer config --no-plugins bin-dir

if [[ -f composer.json && "${local_composer_checksum}" == "${remote_composer_checksum}" ]] ; then
  echo "---> Reusing composer.json"
  cp -r "${vendor_layer_dir}" "./vendor"
else
  echo "---> Installing composer.json"
  composer install
  if [[ -d "${vendor_layer_dir}" ]]; then
    rm "${vendor_layer_dir:?}/*" -rf
		cp -r vendor/. "${vendor_layer_dir}/"
  fi
  cat > "${vendor_layer_dir}.toml"<<EOL
cache = true
launch = true
metadata = "${local_composer_checksum}"
EOL
fi

nginx_layer_dir="${layers_dir}/nginx"
mkdir -p "${nginx_layer_dir}"

nginx_url="https://storage.gra.cloud.ovh.net/v1/AUTH_be65d32d71a6435589a419eac98613f2/scalingo-php-buildpack/scalingo-18/package/nginx-1.18.0.tgz"
local_nginx_version="1.18.0"
remote_nginx_version="not found"
if [[ -f "${nginx_layer_dir}.toml" ]]; then
    remote_nginx_version=$(< "${nginx_layer_dir}.toml" yj -t | jq -r .metadata 2>/dev/null || echo 'not found')
fi
if [[ "${local_nginx_version}" == "${remote_nginx_version}" ]] ; then
  echo "---> Reusing nginx"
  cp -r "${nginx_layer_dir}" "./nginx"
else
  echo "---> Installing nginx"
  wget -q -O - "${nginx_url}" | tar -xzf - -C "${nginx_layer_dir}"
  mkdir "${nginx_layer_dir}/bin/"
  cp "${nginx_layer_dir}/sbin/nginx" "${nginx_layer_dir}/bin/nginx"

cat > "${nginx_layer_dir}.toml"<<EOL
cache = true
launch = true
metadata = "${local_nginx_version}"
EOL
fi

log_layer_dir="${layers_dir}/log"
mkdir -p "${log_layer_dir}"

mkdir "${nginx_layer_dir}/etc/" -p
mkdir "${php_layer_dir}/config/" -p
cp "${vendor_layer_dir}/heroku/heroku-buildpack-php/conf/php/php-fpm.conf" "${nginx_layer_dir}/etc/php-fpm.conf"
cp "${bp_dir}/config/nginx/base.conf" "${nginx_layer_dir}/conf/nginx-php.conf"
echo "ls: $(ls -lh ${bp_dir}/config/)"
echo "ls: $(ls -lh ${bp_dir}/config/php/)"
cp "${bp_dir}/config/php/php.ini" "${php_layer_dir}/config/"
cp "${bp_dir}/config/php/php-fpm-73.conf" "${php_layer_dir}/config/"
cp "${bp_dir}/config/php/php-fpm.conf" "${php_layer_dir}/config/"

cat > "run" <<SH
#!/usr/bin/env bash
php -c "${php_layer_dir}/config/php.ini"
php-fpm -y "${php_layer_dir}/config/php-fpm.conf" -p "${nginx_layer_dir}" -g "/tmp/php-fpm.sock"
nginx -p "${nginx_layer_dir}" -c "${nginx_layer_dir}/conf/nginx-php.conf"
SH
chmod +x "run"

echo "---> Generate Launcher"

cat >> "${layers_dir}/launch.toml" <<EOL
[[processes]]
type = "web"
command = "/workspace/run"
EOL
